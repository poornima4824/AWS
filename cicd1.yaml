---
AWSTemplateFormatVersion: 2010-09-09

Description: ECSWSV2

Parameters:
  VpcId:
    Type: String
    Default: ""

  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PrivateSubnet1:
    Type: String
  PrivateSubnet2:
    Type: String
  AvailabilityZone1:
    Type: String
  AvailabilityZone2:
    Type: String
  Sgcodebuild:
    Type: String
  
  BranchName:
    Description: CodeCommit branch name    
    Type: String
    Default: development

  RepositoryName:
    Description: CodeComit repository name
    Type: String
    Default: p-poc-ids-cms

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/amazonlinux2-x86_64-standard:3.0
    Description: Default AWS CodeBuild image for Amazon Linux 2
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a CodeBuild Docker image

  EcrDockerRepository:
    Type: String
    Description: The name of the ECR Repository created
    Default: p-poc-ids-cms
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the ECR Repository name
   
  CodePipelineArtifactBucket:
    Type: String
    Description: The name of the S3 Bucket created
    Default: p-poc-artifactbucket
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the S3 Bucket created
  
  LoadBalancer: 
    Type: String
  
  LoadBalancerSecurityGroupApp2: 
    Type: String


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildDockerImage
      - Label:
          default: ECR
        Parameters: 
          - EcrDockerRepository
      - Lablel:
          default: s3
        Parameters:
          - CodePipelineArtifactBucket
    
    ParameterLabels:
      CodeBuildDockerImage:
        default: Docker image
      EcrDockerRepository:
        default: ECR Repository Name
      CodePipelineArtifactBucket:
        default: CodePipeline-Artifacts  s3 Bucket Name


Resources:
   # ECS Cluster we are going to add is Propelor-Ecs-Fargate-Cluster2

   # Create Access Role for ECS-Tasks
  ExecutionRoleApp3:  # We need to change the exceutionrole name for each application and also we can can this one in common resource
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::AccountId', 'ExecutionRoleApp3']] # change naming here also
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  
  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: app-1 # Need to change the ECR repo name 
      
   # Create a TaskDefinition with container details
  TaskDefinitionApp3:  # We need to change the TaskDefinitionApp2 name for each application
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: p-poc-ids-cms # Need to change task definition name 
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRoleApp3  # change the role name  
      ExecutionRoleArn: !Ref ExecutionRoleApp3 # change the role name
      ContainerDefinitions:
        - Name: !Join ['-', ['ids-cms','Container']] # Change the container name
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/p-poc-ids-cms:latest' # change the ecr name  
          PortMappings:
            - ContainerPort: 80 # !Ref ContainerPort  ## we have to add 
              HostPort: 80 #!Ref ContainerPort   ## we have to add 
 

  # Creat a security group for Containers and open in bound Container port from Load balancer security group to the Container 
  ContainerSecurityGroupApp3: # change the naming or else let it be
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref 'AWS::AccountId', 'ContainerSecurityGroupApp3']] #need to change name 
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080 #!Ref ContainerPort
          ToPort: 8080 #!Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupApp2
        - IpProtocol: tcp # Added this rule 
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupApp2

  
  
  #Create a TargetGroup for HTTP port 8080
  TargetGroup1: #Need to change the name for next pipeline
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', ['p-poc','TargetGroup1']] # change the targetgroup name
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId ##vpc id 

  # Create a LoadBalancerListener and attach the TargetGroup and LoadBalancer
  LoadBalancerListener1: #Need to change the name for next pipeline
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup1 # change the targetgroup name
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener1 # change the LoadBalancerListener name
    Properties:
      ServiceName: !Join ['-', ['ids-web', 'p-poc-svc']]
      Cluster: p-poc-ecs-cluster
      TaskDefinition: !Ref TaskDefinitionApp3
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1	
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroupApp3 # change the ContainerSecurityGroupApp name
      LoadBalancers:
        - ContainerName: !Join ['-', ['ids-web', 'Container']]
          ContainerPort: 80 #!Ref ContainerPort  ### we have to create 
          TargetGroupArn: !Ref TargetGroup1 # need to change targetgroup name

  CodePipelineServiceRole: # No need to change
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codepipeline-access-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:*
    # DependsOn: CodePipelineArtifactBucket
  AmazonCloudWatchEventRole: # No need to change
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-cwe-pipeline-execution-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref CodePipeline
  AmazonCloudWatchEventRule: # No need to change
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join 
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref RepositoryName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref BranchName
      Targets:
        - Arn: !Join 
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref CodePipeline
          RoleArn: !GetAtt 
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-AppPipeline
  CodeBuildServiceRole: # No need to change
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole  
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codebuild-service-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecs:* 
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
              - Resource: '*'
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                 
  CodeBuildProject: 
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
          - Name: REPOSITORY_NAME
            Value: !Ref RepositoryName
          - Name: REPOSITORY_BRANCH
            Value: !Ref BranchName
          - Name: ENVIRONMENT_NAME
            Value: !Ref BranchName
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      VpcConfig:
          SecurityGroupIds: 
            - !Ref Sgcodebuild
          Subnets: 
            - !Ref PrivateSubnet1	
            - !Ref PrivateSubnet2            
          VpcId: !Ref VpcId


  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Name: !Sub ${AWS::StackName}-pipeline
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
    DependsOn: CodeBuildProject

Outputs:
  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer
    

  # LoadBalancerUrl:
  #   Description: The URL of the ALB
  #   Value: !GetAtt LoadBalancer.DNSName

  Listener:
    Description: A reference to a port 8080 listener
    Value: !Ref LoadBalancerListener1

  ECSTaskDefinition:
    Description: ECS TaskDefinition created
    Value: !Ref TaskDefinitionApp3

  TargetGroup:
    Description: TargetGroup created
    Value: !Ref TargetGroup1
